Index: src/video.cpp
===================================================================
--- src/video.cpp	(revision 4166)
+++ src/video.cpp	(working copy)
@@ -10,6 +10,106 @@
 #include "vp8/vp8encoder.h"
 #endif
 
+
+VideoAccounting::VideoAccounting()
+{
+	ResetFpsAccounting(15);
+	lastts = 0;
+	SetCodecName("??");
+	traceOn = true;
+}
+
+void  VideoAccounting::SetCodecName(const char * name)
+{
+	sprintf(codecName, "%s %s", VideoCodec::GetNameFor(type), name);
+}
+
+void VideoAccounting::ResetFpsAccounting(unsigned int fps)
+{
+	if (fps > 60) fps = 60;
+	for (int i=0; i<5; i++)
+	{
+		frameCount[i] = fps;
+	}
+}
+
+unsigned int VideoAccounting::GetCurrentFps()
+{
+	// Calculate the fps as the mean of all collected values
+	unsigned int fps = 0;
+	unsigned int currentCounter = ( time(NULL) % 5 );
+
+	DoFpsAccounting(false);
+	for (int i=0; i<5; i++)
+	{
+		if ( currentCounter!= i )
+			fps += frameCount[i];
+	}
+
+	return ( lastts != 0) ? ( fps / 4 ) : 0;
+}	
+
+void VideoAccounting::DoFpsAccounting(bool addOne)
+{
+	time_t currentts =  time(NULL);
+	unsigned int currentCounter = ( currentts % 5 );
+
+	if ( lastts == currentts )
+	{
+		if (addOne) frameCount[currentCounter]++;
+	}
+	else if ( currentts - lastts < 5)
+	{
+		unsigned int lastCounter = lastts % 5;
+
+		while ( lastCounter != currentCounter )
+		{
+			lastCounter = ( lastCounter + 1 ) % 5;
+			frameCount[currentCounter] = 0;
+		}
+		if (addOne) frameCount[currentCounter] = 1;
+		lastts = currentts;
+
+		// Periodic display of FPS every 5 sec in the log file
+		if ( currentCounter == 0 && traceOn )
+		{
+			Log("-DoFpsAccounting for %s %p: fps = %d.\n", codecName, this,
+								    GetCurrentFps() );
+		}
+	}
+	else if ( lastts == 0 )
+	{
+		if (addOne)
+		{
+			Log("-DoFpsAccounting for %s: first frame received.\n", codecName );
+			frameCount[currentCounter] = 1;
+			lastts = currentts;
+		}
+	}
+	else
+	{
+		//More than 5 second since the last frame was received
+		for (int i=0; i<5; i++)
+		{
+			frameCount[i] = 0;
+		}
+		frameCount[currentCounter] = 1;
+		lastts = currentts;
+		Log("-DoFpsAccounting for %s: No frame received since 5 sec\n", codecName);
+	}
+}
+
+VideoDecoder::VideoDecoder()
+{
+	SetCodecName("decoder");
+}
+
+VideoEncoder::VideoEncoder()
+{
+        SetCodecName("encoder");
+}
+
+
 VideoDecoder* VideoCodecFactory::CreateDecoder(VideoCodec::Type codec)
 {
 	Log("-CreateVideoDecoder[%d,%s]\n",codec,VideoCodec::GetNameFor(codec));
Index: src/rtpsession.cpp
===================================================================
--- src/rtpsession.cpp	(revision 4165)
+++ src/rtpsession.cpp	(working copy)
@@ -981,6 +981,7 @@
 	//Leemos del socket
 	int size = recvfrom(simSocket,buffer,MTU,MSG_DONTWAIT,(sockaddr*)&from_addr, &from_len);
 
+	if (size <= 0) Error("ReadRTP on fd %d error: errno=%d.\n", simSocket, errno);
 	//if got estimator
 	if (remoteRateEstimator)
 		//Update estimator
@@ -1115,8 +1116,9 @@
 
 	//Check minimum size for rtp packet
 	if (size<12)
-		return 0;
-
+	{
+		return Error("Invalid RTP packet read from fd %d. Packet too small of %d bytes.\n", simSocket, size);
+	}
 	//This should be improbed
 	if (useNACK && recSSRC && recSSRC!=RTPPacket::GetSSRC(buffer))
 	{
Index: src/h264/h264encoder.cpp
===================================================================
--- src/h264/h264encoder.cpp	(revision 4165)
+++ src/h264/h264encoder.cpp	(working copy)
@@ -47,6 +47,8 @@
 	
 	//Reste values
 	enc = NULL;
+
+	SetCodecName("x264 encoder");
 }
 
 /**********************
@@ -240,6 +242,11 @@
 	pic.img.i_plane = 3;
 	pic.i_pts  = pts++;
 
+	/* IVeS - patch send one I-frame every 2 sec during first intra period */
+	if ( pic.i_pts < intraPeriod && (pic.i_pts % (2*fps) == 0) )
+        {
+                pic.i_type = X264_TYPE_I;
+        }
 	// Encode frame and get length
 	int len = x264_encoder_encode(enc, &nals, &numNals, &pic, &pic_out);
 
@@ -287,7 +294,7 @@
 
 	//Set first nal
 	curNal = 0;
-	
+	DoFpsAccounting(true);
 	return frame;
 }
 
Index: src/h264/h264decoder.cpp
===================================================================
--- src/h264/h264decoder.cpp	(revision 4165)
+++ src/h264/h264decoder.cpp	(working copy)
@@ -52,6 +52,7 @@
 	
 	//Lo abrimos
 	avcodec_open2(ctx, codec, NULL);
+	SetCodecName("decoder");
 }
 
 /***********************
@@ -357,6 +358,7 @@
 		if(ctx->width==0 || ctx->height==0)
 			return Error("-Wrong dimmensions [%d,%d]\n",ctx->width,ctx->height);
 
+		DoFpsAccounting(true);
 		int w = ctx->width;
 		int h = ctx->height;
 		int u = w*h;
Index: src/mediabridgesession.cpp
===================================================================
--- src/mediabridgesession.cpp	(revision 4165)
+++ src/mediabridgesession.cpp	(working copy)
@@ -587,7 +587,7 @@
 			numpixels = width*height*3/2;
 
 			//Set also frame rate and bps
-			encoder->SetFrameRate(25,300,500);
+			encoder->SetFrameRate(10,200,200);
 
 			//Set them in the encoder
 			encoder->SetSize(width,height);
@@ -938,7 +938,7 @@
 			numpixels = width*height*3/2;
 
 			//Set also frame rate and bps
-			encoder->SetFrameRate(25,300,500);
+			encoder->SetFrameRate(10,200,200);
 
 			//Set them in the encoder
 			encoder->SetSize(width,height);
Index: src/flv1/flv1codec.cpp
===================================================================
--- src/flv1/flv1codec.cpp	(revision 4165)
+++ src/flv1/flv1codec.cpp	(working copy)
@@ -46,6 +46,7 @@
 	//Alocamos el conto y el picture
 	ctx = avcodec_alloc_context3(codec);
 	picture = avcodec_alloc_frame();
+	SetCodecName("flv1 ffmpeg encoder");
 }
 
 /***********************
@@ -226,7 +227,7 @@
 
 	//Y ponemos a cero el comienzo
 	bufIni=0;
-
+	DoFpsAccounting(true);
 	return frame;
 }
 
@@ -307,6 +308,7 @@
 	
 	//Lo abrimos
 	avcodec_open2(ctx, codec, NULL);
+	SetCodecName("decoder");
 }
 
 /***********************
@@ -348,6 +350,7 @@
 	//Si hay picture
 	if (got_picture)
 	{
+		DoFpsAccounting(true);
 		if(ctx->width==0 || ctx->height==0)
 			return 0;
 
Index: include/video.h
===================================================================
--- include/video.h	(revision 4165)
+++ include/video.h	(working copy)
@@ -82,10 +82,34 @@
 };
 
 
+class VideoAccounting
+{
+public:
+	VideoAccounting();
+        unsigned int GetCurrentFps();
+	void SetCodecName(const char * name);
+	void StatTracesEnabled( bool traceOn ) { this->traceOn = traceOn; }
 
-class VideoEncoder
+public:
+	VideoCodec::Type type;
+
+protected:
+        void ResetFpsAccounting(unsigned int fps);
+
+        // To be called each frame is actually decoded
+        void DoFpsAccounting(bool addOne = false);
+        unsigned int frameCount[5];
+	// for future bw accounting
+        unsigned int bwCount[5];
+        time_t  lastts;
+	char codecName[120];
+	bool traceOn;
+};
+
+class VideoEncoder : public VideoAccounting
 {
 public:
+	VideoEncoder();
 	virtual ~VideoEncoder(){};
 
 	virtual int SetSize(int width,int height)=0;
@@ -93,13 +117,12 @@
 	virtual int GetNextPacket(BYTE *out,DWORD &len)=0;
 	virtual int FastPictureUpdate()=0;
 	virtual int SetFrameRate(int fps,int kbits,int intraPeriod)=0;
-public:
-	VideoCodec::Type type;
 };
 
-class VideoDecoder
+class VideoDecoder : public VideoAccounting
 {
 public:
+	VideoDecoder();
 	virtual ~VideoDecoder(){};
 
 	virtual int GetWidth()=0;
